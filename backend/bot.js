import TelegramBot from "node-telegram-bot-api";
import { startBackend } from "./index.js";
import { addUser } from "./connectToDB.js";
import {
  createOrGetTopic,
  addTest,
  getTopics,
  getTestsByTopic,
  getOrCreateProgress,
  updateProgress,
  finishProgress,
} from "./connectToDB.js";
import { configDotenv } from "dotenv";

configDotenv();
startBackend();

const bot = new TelegramBot(process.env.BOT_TOKEN, { polling: true });

// üîê ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
const ADMIN_ID = process.env.ADMIN_ID;

// üî∏ –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∞–¥–º–∏–Ω–æ–≤ –≤ —Ä–∞–º–∫–∞—Ö —Å–µ—Å—Å–∏–π
const userState = {}; // { chatId: { topicId, tests, currentIndex, correct, total, progressId, waitingAnswer } }
const adminState = {}; // { chatId: { step, topicId, question } }

// ===========================
// üß© –û–°–ù–û–í–ù–û–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–û–ë–©–ï–ù–ò–ô
// ===========================
bot.on("message", async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text?.trim();

  // üöÄ –ö–æ–º–∞–Ω–¥–∞ /start
  if (text === "/start") {
    const { user } = await addUser({
      telegramId: msg.chat.id,
      telegramUsername: msg.chat.username,
    });

    const topics = await getTopics();
    const buttons = topics.map((t) => [{ text: t.title, callback_data: `topic_${t.id}` }]);

    bot.sendMessage(
      chatId,
      `–í–æ–π–¥–∏—Ç–µ`,
      {
        reply_markup: {
          inline_keyboard: [
            [
              { text: "–í–æ–π—Ç–∏", url: `http://127.0.0.1:5501/redirect.html?token=${user?.accessToken}` },
            ]
          ]
        },
      }
    );

    bot.sendMessage(
      chatId,
      `Hello, ${msg.from.first_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å üëã\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞:`,
      {
        reply_markup: {
          inline_keyboard: buttons
        },
      }
    );

    return;
  }

  // üß© –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å
  if (userState[chatId]?.waitingAnswer) {
    const state = userState[chatId];
    const currentQuestion = state.tests[state.currentIndex];
    const isCorrect = text.toLowerCase() === currentQuestion.correct_answer.toLowerCase();

    if (isCorrect) {
      state.correct++;
      await bot.sendMessage(chatId, "‚úÖ –í–µ—Ä–Ω–æ!");
    } else {
      await bot.sendMessage(
        chatId,
        `‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${currentQuestion.correct_answer}`
      );
    }

    state.total++;
    await updateProgress(state.progressId, state.correct, state.total);
    state.currentIndex++;

    if (state.currentIndex < state.tests.length) {
      const nextQ = state.tests[state.currentIndex];
      bot.sendMessage(chatId, `–í–æ–ø—Ä–æ—Å ${state.currentIndex + 1}:\n${nextQ.question}`);
    } else {
      await finishProgress(state.progressId);
      bot.sendMessage(
        chatId,
        `üèÅ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: ${state.correct} –∏–∑ ${state.total} (${Math.round(
          (state.correct / state.total) * 100
        )}%)`
      );
      delete userState[chatId];
    }
    return;
  }

  // ===========================
  // üß† –†–ï–ñ–ò–ú –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê
  // ===========================

  if (text === "/admin" && chatId.toString() === ADMIN_ID) {
    adminState[chatId] = { step: "choose_topic" };
    bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã (–µ—Å–ª–∏ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—Å—Ç—Å—è –Ω–æ–≤–∞—è):");
    return;
  }

  // ‚ûï –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–º—ã
  if (adminState[chatId]?.step === "choose_topic") {
    const topicId = await createOrGetTopic(text);
    adminState[chatId] = { step: "enter_question", topicId };
    bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:");
    return;
  }

  // ‚ûï –í–≤–æ–¥ –≤–æ–ø—Ä–æ—Å–∞
  if (adminState[chatId]?.step === "enter_question") {
    adminState[chatId].question = text;
    adminState[chatId].step = "enter_answer";
    bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:");
    return;
  }

  // ‚ûï –í–≤–æ–¥ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
  if (adminState[chatId]?.step === "enter_answer") {
    const { topicId, question } = adminState[chatId];
    await addTest(topicId, question, text);

    adminState[chatId].step = "next_action";
    bot.sendMessage(chatId, "‚úÖ –í–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω! –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–∏–Ω?", {
      reply_markup: {
        keyboard: [["–î–∞", "–ù–µ—Ç"]],
        resize_keyboard: true,
        one_time_keyboard: true,
      },
    });
    return;
  }

  // ‚ûï –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
  if (adminState[chatId]?.step === "next_action" && text === "–î–∞") {
    adminState[chatId].step = "enter_question";
    bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:");
    return;
  }

  // üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
  if (adminState[chatId]?.step === "next_action" && text === "–ù–µ—Ç") {
    delete adminState[chatId];
    bot.sendMessage(chatId, "üëå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.", {
      reply_markup: { remove_keyboard: true },
    });
    return;
  }
});

// ===========================
// üéØ –û–ë–†–ê–ë–û–¢–ß–ò–ö INLINE-–ö–ù–û–ü–û–ö (callback_query)
// ===========================
bot.on("callback_query", async (ctx) => {
  const chatId = ctx.message.chat.id;
  const data = ctx.data;

  if (data.startsWith("topic_")) {
    const topicId = parseInt(data.split("_")[1]);
    const tests = await getTestsByTopic(topicId);

    if (!tests.length) {
      bot.sendMessage(chatId, "‚ö†Ô∏è –î–ª—è —ç—Ç–æ–π —Ç–µ–º—ã –ø–æ–∫–∞ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤.");
      return;
    }

    const user = await addUser({
      telegramId: chatId,
      telegramUsername: ctx.from.username,
    });

    const progress = await getOrCreateProgress(user.user.id, topicId);

    userState[chatId] = {
      topicId,
      tests,
      currentIndex: 0,
      correct: 0,
      total: 0,
      progressId: progress.id,
      waitingAnswer: true,
    };

    bot.sendMessage(chatId, `üß© –¢–µ—Å—Ç –ø–æ —Ç–µ–º–µ –Ω–∞—á–∞—Ç!\n\n–í–æ–ø—Ä–æ—Å 1:\n${tests[0].question}`);
  }
});
